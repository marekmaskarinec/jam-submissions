
import (
	"signal.um"

	"boss.um"
	"game.um"
	"enemy.um"
)

var (
	score: int

	bossSpawned: bool
)

fn reset*() {
	score = 0
	bossSpawned = false
}

fn init*() {
	reset()

	signal.register("enemy_kill", signal.Callback{
		score++
	})
}

fn enemyLimit(): int {
	if game.bossActive {
		return 0
	}

	return trunc(0.15 * score + 1)
}

fn spawn() {
	enm := new(enemy.Enemy)
	enm.init(game.env.path[0])
	game.enmsScn = append(game.enmsScn, enm.getEnt())
	game.enms = append(game.enms, enm)
}

fn spawnBoss() {
	bss := new(boss.Boss)
	bss.init(game.env.path[0])
	game.enmsScn = append(game.enmsScn, bss.getEnt())
	game.enms = append(game.enms, bss)
}

fn handle*() {
	for len(game.enms) < enemyLimit() {
		spawn()
	}

	if game.bossActive && !bossSpawned {
		spawnBoss()
		bossSpawned = true
	}
}

fn draw*() { }

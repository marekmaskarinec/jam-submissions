
import (
	"th.um"
	"ent.um"
	"std.um"
	"lerp.um"
	"rect.um"
	"atlas.um"
	"image.um"
	"input.um"
	"particles.um"

	"common.um"
	"../game.um"
	"../../global.um"
	"../../effects.um"
	"../../animator.um"
)

const (
	speed = 80
	bombFuseLen = 1000
	damageRadius = global.tileSize * 2
)

type Bomb = struct {
	e: ^ent.Ent
	spawnTime: int
}

var (
	e: ^ent.Ent								

	img: image.Image
	atl: atlas.Atlas
	anm: animator.Anim

	bombs: []Bomb

	xlerper, ylerper: lerp.Lerper
	effPos: th.Vf2

	bombImg: image.Image
)

fn mkBomb(p: th.Vf2): Bomb {
	b := Bomb{}
	b.e = new(ent.Ent)
	b.e^ = ent.mk(bombImg, th.Transform{ p: p, s: th.Vf2{1, 1} })
	b.e.r.w = global.tileSize
	b.e.r.h = global.tileSize
	b.spawnTime = th.time

	return b
}

fn (b: ^Bomb) getParticles(): particles.Emitter {
	partc := 100
	e := particles.Emitter{
		pos: b.e.t.p.add(th.Vf2{b.e.r.w/2, b.e.r.h/2}),
		dm: th.Vf2{4, 4},
		gravity: th.Vf2{0.1, 0.1},

		repeat: false,
		active: true,

		angle: th.Vf2{0, 360},

		lifetime: 600,
		lifetimeRandomness: 0.2,

		velocity: 0.4,
		velocityRandomness: 0.2,

		size: 2,
		sizeRandomness: 0,
		maxSize: 2,

		colors: []uint32{0xcb353dff, 0xf9b64edd, 0xed6240bb, 0x563d4399, 0x6a4a5777},
		particles: make([]particles.Particle, partc)}

	for i:=0; i < len(e.particles); i++ {
		e.particles[i] = particles.Particle{
			start_time: th.time + 200/partc * i,
			seed: std.rand()}
	}

	return e
}

fn (b: ^Bomb) explode() {
	for i:=0; i < len(game.enms); i++ {
		if b.e.t.p.distanceTo(game.enmsScn[i].t.p) < damageRadius {
			game.enms[i].damage(10)
		}
	}

	effects.addEmitter(b.getParticles())
}

fn (b: ^Bomb) handle(): bool {
	if th.time - b.spawnTime > bombFuseLen {
		b.explode()
		return true
	}

	return false
}

fn (b: ^Bomb) draw() {
	timeLeft := bombFuseLen - (th.time-b.spawnTime)
	if (th.time/(timeLeft + 50)) % 2 == 0 {
		b.e.draw(global.cam)
	}
}

fn reset*() {
	e = new(ent.Ent)
	e^ = ent.mk(img, th.Transform{ s: th.Vf2{1, 1} })
	e.r.w = global.tileSize
	e.r.h = global.tileSize
	e.t.o = th.Vf2{global.tileSize/2.0, global.tileSize/2.0}
	e.t.p = th.Vf2{7 * global.tileSize, 3 * global.tileSize}
	effPos = th.Vf2{7 * global.tileSize, 3 * global.tileSize}

	xlerper = lerp.Lerper{}
	ylerper = lerp.Lerper{}

	bombs = []Bomb{}
}

fn init*() {
	img = image.load("gfx/characters/bomber.png")
	atl = atlas.mk(img, th.Vf2{2, 1})

	anm = animator.Anim{
		atl: atl,
		min: 0,
		max: 2,
		fps: 10}

	bombImg = image.load("gfx/characters/bomb.png")
}

fn canPlace(): bool {
	if game.money < game.bombPrice {
		return false
	}

	return true
}

fn place() {
	bombs = append(bombs, mkBomb(e.t.p))
	game.money -= game.bombPrice
}

fn handle*() {
	for i:=0; i < len(bombs); i++ {
		if bombs[i].handle() {
			bombs = delete(bombs, i)
		}
	}

	if game.character != game.charBomber {
		return
	}

	common.move(&e.t.p, &effPos, &xlerper, &ylerper, speed)

	if input.isJustPressed(input.key_up) {
		e.t.r = -90
	}

	if input.isJustPressed(input.key_down) {
		e.t.r = 90
	}

	if input.isJustPressed(input.key_right) {
		e.t.r = 0
	}

	if input.isJustPressed(input.key_left) {
		e.t.r = 180
	}

	if input.isJustPressed(input.key_enter) {
		if canPlace() {
			place()
		}
	}
}

fn draw*() {
	for i:=0; i < len(bombs); i++ {
		bombs[i].draw()
	}

	if game.character != game.charBomber {
		anm.fps = 2
		e.c = 0xffffffaa
		anm.animate(th.time)
		e.draw(global.cam)
		e.c = th.white
		anm.fps = 10

		return
	}

	anm.animate(th.time)
	e.draw(global.cam)
}


import (
	"entity.um"
	"polygon.um"
	"input.um"
	"tophat.um"
	"misc.um"
	"image.um"

	"level.um"
	"global.um"
	"goomba.um" // this shouldn't be done
)

var (
	ent: entity.ent
	feet: entity.ent
	mx, my: real
	maxy: real = 0.2
	gscale: real = 0.002
	canjump: bool = false
	canfall: bool = false

	walkanim: []image.img
	charimg: image.img
	jumpimg: image.img
)

fn init*() {
	ent = entity.mk(polygon.mk(60, 30, []int32{0, 0, 5, 0, 5, 10, 0, 10}), 0x292831ff, -1)
	charimg = image.load("gfx/character.png")
	walkanim = global.smaptoanim(image.load("gfx/character-walk.png"), 2)
	jumpimg = image.load("gfx/character-jump.png")
	
	feet = entity.mk(polygon.mk(60, 40, []int32{0, 0, 3, 0, 3, 1, 0, 1}), tophat.yellow, -2)
}

fn handle*(scn: []^entity.ent) {
	/////////////////////////////
	// world collisions
	//ent.p.x, ent.p.y = input.getglobalmousepos(global.cam)
	var cx, cy, tx, ty: int32
	//ent.color = tophat.cyan * int(level.tmap.getcoll(ent, &cx, &cy, &tx, &ty)) | 0xff

	moved := false
	if input.ispressed(input.KEY_A) {
		moved = true
		ent.p.x -= 0.06 * tophat.delta
	}
	if input.ispressed(input.KEY_D) {
		moved = true
		ent.p.x += 0.06 * tophat.delta
	}

	if moved {
		coll := level.tmap.getcoll(ent, &cx, &cy, &tx, &ty)
		ctx := round((ent.p.x - level.tmap.x) / level.tmap.cellsize)
		cty := round((ent.p.y - level.tmap.y) / level.tmap.cellsize)
		fty := round((ent.p.y + ent.p.h - level.tmap.y - 1) / level.tmap.cellsize)
		if coll && (cy == round(ent.p.y) || ty == cty || cty + 1 != fty) {
			canjump = true
			right := false
			if cx != round(ent.p.x) {
				right = true
			}

			ent.p.x = (cx/level.tmap.cellsize + 1) * level.tmap.cellsize

			if right {
				ent.p.x -= (ent.p.w + level.tmap.cellsize + 1)
			}
		}
		ent.animate(8, &walkanim)
	} else {
		ent.image = charimg
	}

	if !canjump {
		ent.image = charimg
	}

	if canfall && input.isjustpressed(input.KEY_S){
		my += gscale * 50
	}

	ent.p.y += my * tophat.delta

	coll := level.tmap.getcoll(ent, &cx, &cy, &tx, &ty)
	if coll {
		my = 0

		if cy == round(ent.p.y) {
			my = gscale*4
			ent.p.y += gscale * tophat.delta * 80 // this is really hacky, but it does the job
		}

		ctx := round((ent.p.x - level.tmap.x) / level.tmap.cellsize)
		cty := round((ent.p.y - level.tmap.y) / level.tmap.cellsize)
		if cy >= round(ent.p.y) + ent.p.h && cty < ty {
			abscy := (cy - level.tmap.y)
			ent.p.y = abscy - abscy%level.tmap.cellsize + level.tmap.y - ent.p.h
			canjump = true
			canfall = false
		}
	}

	if canjump && input.isjustpressed(input.KEY_SPACE) {
		my = -0.08
		ent.p.y -= 0.001 * tophat.delta
		canjump = false
		canfall = true
	}

	if my < maxy {
		my += gscale
	}

	feet.p.x = ent.p.x + 1
	feet.p.y = ent.p.y + ent.p.h + 1

	/////////////////////////////
	// goomba handling
	if coll := feet.getcoll(scn); bool(coll) && my > 0 {
		for i:=0; i < len(scn); i++ {
			if scn[i].id == coll {
				goomba.goombas[i].dead = true
			}
		}
	} else if bool(ent.getcoll(scn)) {
		// todo handle player hits
	}

	global.cam.x += round((ent.p.x - global.cam.x) * 0.9)
	global.cam.y += round((ent.p.y - global.cam.y) * 0.9)
	level.playerx = ent.p.x
	level.playery = ent.p.y

	ent.draw(global.cam)
	//feet.draw(global.cam)
}

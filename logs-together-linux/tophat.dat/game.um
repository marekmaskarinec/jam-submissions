
import (
	"entity.um"
	"input.um"
	"polygon.um"
	"rawdraw.um"
	"tophat.um"
	"raycast.um"
	"vec.um"
	"image.um"
	"std.um"
	"tween.um"
	"rawdraw.um"
	"audio.um"

	"global.um"
)

type Player = struct {
	ent: entity.ent
	controls: []char
	anim: []image.img
	idle_image: image.img
}

type Obstacle = interface {
	draw()
	get_ent(): ^entity.ent
	handle()
}

type Saw = struct {
	ent: entity.ent
	cover: entity.ent
	speed: real
	bound_min, bound_max: real
	dir: int
}

type Log = struct {
	ent: entity.ent
	anim: ^[]image.img
	speed: real
	bound_min, bound_max: real
	dir: int
}

type Pile = struct {
	ent: entity.ent
}

type EffectLog = struct {
	scale: real
	rot: real
	px: real
	py: real
	tx: tween.twn
	ty: tween.twn
}

const (
	wire_thickness = 2
	max_obstacles = 5
	saw_rot_speed = 2
)

var (
	p1, p2: Player

	w_ray: raycast.ray
	move_speed: real
	obstacles: []Obstacle

	saw_image: image.img
	saw_guard: image.img
	saw_guard_cover: image.img
	saw_end: image.img
	saw_endf: image.img

	piles: []image.img

	log_normal, log_broken, log_broken_flip: []image.img
	log_anims: []^[]image.img

	log_effect: EffectLog
	do_effect: bool
	
	score: int
	dead: bool = true
	death_msg: str = "LOGS TOGETHER"

	pickup_sound: audio.sound
	music: audio.sound
	die_sound: audio.sound
)

fn ysort*(ents: []Obstacle): []Obstacle {
	swapped := true

	for swapped {
		swapped = false

		for i:=1; i < len(ents); i++ {
			if ents[i-1].get_ent().p.y > ents[i].get_ent().p.y {
				tmp := ents[i]
				ents[i] = ents[i-1]
				ents[i-1] = tmp

				swapped = true
			}
		}
	}

	return ents
}

// player
fn (p: ^Player) handle() {
	moved := false

	if (input.ispressed(int32(p.controls[0])) && p.ent.p.y > global.cam.y - global.cam.h/2)|| p.ent.p.y > global.cam.y + global.cam.h/2 - 8 {
		p.ent.p.y -= move_speed * tophat.delta
		moved = true
	}

	if input.ispressed(int32(p.controls[2])) {
		p.ent.p.y += move_speed * tophat.delta
		moved = true
	}

	if input.ispressed(int32(p.controls[1])) && p.ent.p.x > global.cam.x - global.cam.w/2 {
		p.ent.p.x -= move_speed * tophat.delta
		moved = true
	}

	if input.ispressed(int32(p.controls[3])) && p.ent.p.x < global.cam.x + global.cam.w/2 - 5 {
		p.ent.p.x += move_speed * tophat.delta
		moved = true
	}

	if !moved {
		p.ent.image = p.idle_image
	} else {
		p.ent.animate(12, &p.anim)
	}
}

// obstacles
fn (s: ^Saw) handle() {
	if s.ent.p.x <= s.bound_min {
		s.dir = 1
		s.ent.p.x = s.bound_min + 1
	}

	if s.ent.p.x >= s.bound_max {
		s.dir = -1
		s.ent.p.x = s.bound_max - 1
	}

	s.ent.p.x += s.speed * s.dir * tophat.delta
	s.ent.rot += saw_rot_speed * tophat.delta

	s.cover.p.x = s.ent.p.x
	//s.cover.p.y = s.ent.p.y + 10
}

fn (s: ^Saw) draw() {
	for i:=0; i < (s.bound_max - s.bound_min) / 20 + 1; i++ {
		x := round(s.bound_min + i * 20 - global.cam.x + global.cam.w/2)
		y := round(s.ent.p.y - global.cam.y + global.cam.h/2)

		saw_guard.draw(x, y, 0, 1)
	}

	s.ent.draw(global.cam)
	s.cover.draw(global.cam)
	
	for i:=0; i < (s.bound_max - s.bound_min) / 20 + 1; i++ {
		x := round(s.bound_min + i * 20 - global.cam.x + global.cam.w/2)
		y := round(s.ent.p.y - global.cam.y + global.cam.h/2)

		saw_guard_cover.draw(x, y, 0, 1)
	}

	x := round(s.bound_min - 20 - global.cam.x + global.cam.w/2)
	y := round(s.ent.p.y - global.cam.y + global.cam.h/2)
	saw_end.draw(x, y, 0, 1)

	x += round(s.bound_max - s.bound_min) + 40
	saw_endf.draw(x, y, 0, 1)
}

fn (s: ^Saw) get_ent(): ^entity.ent {
	return &s.ent
}

fn mk_saw(x, y, speed, min, max: real): Saw {
	s := Saw{}
	s.ent = entity.mk(polygon.mk(x, y, []int32{0, 0, 20, 0, 20, 10, 0, 10}), tophat.red, 1)
	s.cover = entity.mk(polygon.mk(x, y+11, []int32{1, 0, 19, 0, 19, 8, 1, 8}), global.bg_color, 0)
	s.speed = speed
	s.bound_min = min
	s.bound_max = max
	if s.ent.p.x <= s.bound_min || s.ent.p.x >= s.bound_max {
		s.ent.p.x = min + 1
	}
	s.dir = 1
	s.ent.image = saw_image

	return s
}

fn (s: ^Log) handle() {
	s.ent.p.y += s.speed * s.dir * tophat.delta
	s.ent.animate(round(80 * s.speed), s.anim)
}

fn (s: ^Log) draw() {
	s.ent.draw(global.cam)
}

fn (s: ^Log) get_ent(): ^entity.ent {
	return &s.ent
}

fn mk_log(x, y, speed: real, dir: int): Log {
	s := Log{}
	s.ent = entity.mk(polygon.mk(x, y, []int32{0, 0, 48, 0, 48, 7, 0, 7}), tophat.red, std.rand()%400+200)
	s.speed = speed
	s.dir = dir
	s.anim = log_anims[std.rand()%3]
	s.ent.setscale(0.8, 0.8)

	return s
}

fn (s: ^Pile) handle() { }
fn (s: ^Pile) draw() {
	s.ent.draw(global.cam)
}

fn (s: ^Pile) get_ent(): ^entity.ent {
	return &s.ent
}

fn mk_pile(x, y: real): Pile {
	s := Pile{}
	s.ent = entity.mk(polygon.mk(x, y, []int32{0, 0, 20, 0, 20, 20, 0, 20}), tophat.red, 1)
	s.ent.image = piles[std.rand()%4/2]

	return s
}

fn do_gen() {
	sort := false
	if len(obstacles) < max_obstacles {
		sort = true
	}

	for len(obstacles) < max_obstacles {
		r := std.rand()%3

		switch r {
		case 0:
			obstacles = append(obstacles, mk_saw(std.rand()%(global.cam.w-10) - global.cam.w/2, global.cam.y-global.cam.h/2 - std.rand()%20 - 10, std.frand()/12+0.01, std.rand()%global.cam.w/2 - global.cam.w/2 + 5, std.rand()%global.cam.w/2 - 5))
		case 1:
			obstacles = append(obstacles, mk_log(std.rand()%(global.cam.w-10) - global.cam.w/2, global.cam.y-global.cam.h/2 - std.rand()%20 - 10, std.frand()/8+0.06, 1)) // TODO up going logs
		case 2:
			obstacles = append(obstacles, mk_pile(std.rand()%(global.cam.w-10) - global.cam.w/2, global.cam.y-global.cam.h/2 - std.rand()%20 - 10))
		}
	}

	todel := []int{}
	for i, _ in obstacles {
		if obstacles[i].get_ent().p.y > global.cam.y + global.cam.h/2 {
			todel = append(todel, i)
		}
	}

	for i:=0; i < len(todel); i++ {
		obstacles =	delete(obstacles, todel[i] - i)
	}

	obstacles = ysort(obstacles)
}

fn mk_effect_log(x, y: real): EffectLog {
	e := EffectLog{}
	e.scale = 1
	e.rot = 0
	e.px = x - global.cam.x + global.cam.w/2
	e.py = y - global.cam.y + global.cam.h/2
	return e
}

fn (e: ^EffectLog) start() {
	e.tx = tween.mk(&e.px, 6, 500)
	e.ty = tween.mk(&e.py, 6, 500)
	e.tx.start(tophat.t)
	e.ty.start(tophat.t)
}

fn (e: ^EffectLog) handle(): bool {
	if e.scale > 0.001 * tophat.delta {
		e.scale -= 0.001 * tophat.delta
	}
	e.rot += 0.4 * tophat.delta
	e.tx.get(tophat.t)
	e.ty.get(tophat.t)

	log_normal[0].draw(round(e.px), round(e.py), round(e.rot), e.scale)
	
	return !(e.px < 7 && e.py < 7)
}

fn init*() {
	p1 = Player{entity.mk(polygon.mk(-20, 0, []int32{0, 0, 6, 0, 6, 11, 0, 11}), tophat.black, -2), []char{'w', 'a', 's', 'd'}, global.spritemap_to_anim(image.load("gfx/player-red.png"), 2), image.load("gfx/player-red-idle.png")}
	p2 = Player{entity.mk(polygon.mk(20, 0, []int32{0, 0, 6, 0, 6, 11, 0, 11}), tophat.black, -3), []char{char(input.ARROW_UP), char(input.ARROW_LEFT), char(input.ARROW_DOWN), char(input.ARROW_RIGHT)}, global.spritemap_to_anim(image.load("gfx/player-blue.png"), 2), image.load("gfx/player-blue-idle.png")}

	move_speed = 0.2

	w_ray = raycast.ray{}

	obstacles = []Obstacle{}

	saw_image = image.load("gfx/saw.png")
	saw_guard = image.load("gfx/saw_guard.png")
	saw_guard_cover = image.load("gfx/saw_guard_cover.png")
	saw_end = image.load("gfx/saw_end.png")
	saw_endf = saw_end.copy()
	saw_endf.flipv()

	piles = []image.img{image.load("gfx/log-pile.png"), image.load("gfx/tree.png")}

	log_normal = global.spritemap_to_anim(image.load("gfx/log_normal.png"), 5)
	log_broken = global.spritemap_to_anim(image.load("gfx/rolling-log-broken.png"), 5)
	log_broken_flip = global.flipv_anim(log_broken)
	log_anims = []^[]image.img{&log_normal, &log_broken, &log_broken_flip}

	pickup_sound = audio.load("sfx/log_catch.wav")
	pickup_sound.vol(0.3)
	music = audio.load("sfx/music.mp3")
	music.looping(true)
	music.vol(0.2)
	music.play()
	die_sound = audio.load("sfx/die.wav")
	die_sound.vol(0.3)
}

// main loop
fn run*() {
	p1.handle()
	p2.handle()

	w_ray.x = p1.ent.p.x + p1.ent.p.w/2
	w_ray.y = p1.ent.p.y + p1.ent.p.h/2
	w_ray.l = round(vec.distanceto(p1.ent.p.x + p1.ent.p.w/2, p1.ent.p.y + p1.ent.p.h/2, p2.ent.p.x + p2.ent.p.w/2, p2.ent.p.y + p2.ent.p.h/2))
	if w_ray.l != 0 {
		w_ray.r = round(vec.angleto(p1.ent.p.x + p1.ent.p.w/2, p1.ent.p.y + p1.ent.p.h/2, p2.ent.p.x + p2.ent.p.w/2, p2.ent.p.y + p2.ent.p.h/2)) - 90
	}
	
	do_gen()
	global.camy -= (0.035 + (0.0004 * score)) * tophat.delta
	global.cam.y = round(global.camy)

	scn := make([]^entity.ent, len(obstacles))
	for i, _ in obstacles {
		obstacles[i].handle()
		obstacles[i].draw()
		scn[i] = obstacles[i].get_ent()
	}

	if !dead {
		col := tophat.black
		if len(obstacles) > 0 {
			coll := w_ray.getcoll(scn)
			if coll > 0 {
				if coll > 200 {
					for i, _ in obstacles {
						if obstacles[i].get_ent().id == coll {
							e := obstacles[i].get_ent()
							log_effect = mk_effect_log(e.p.x, e.p.y)
							log_effect.start()
							do_effect = true
							obstacles = delete(obstacles, i)
							break
						}
					}
					score++
					pickup_sound.play()
				} else {
					die_sound.play()
					dead = true
				}
			}
    
			coll1 := p1.ent.getcoll(scn)
			coll2 := p2.ent.getcoll(scn)
			if coll1 != 0 && coll1 < 200 && coll2 != 0 && coll2 < 200 {
				die_sound.play()
				dead = true
			}
  	}

		p1.ent.color = col
		p2.ent.color = col

		camx := global.cam.x - global.cam.w/2
		camy := global.cam.y - global.cam.h/2
		rawdraw.drawline(round(p1.ent.p.x + p1.ent.p.w/2 - camx), round(p1.ent.p.y + p1.ent.p.h/2 - camy), round(p2.ent.p.x + p2.ent.p.w/2 - camx), round(p2.ent.p.y + p2.ent.p.h/2 - camy), 2, col)
		p1.ent.draw(global.cam)
		p2.ent.draw(global.cam)
  
		rawdraw.drawtext(repr(score), 6, 6, 0xffffebff, 4)

		if do_effect {
			do_effect = log_effect.handle()
		}
	} else {
		rawdraw.setcolor(0x262626aa)
		rawdraw.drawrect(10, 90, global.cam.w - 20, 70)

		text := death_msg
		text2 := "SCORE: " + repr(score)
		text3 := "press ENTER to retry"
		w, h := rawdraw.textsize(text, 3.5)
		rawdraw.drawtext(text, (global.cam.w-w)/2, 100, 0xffffebff, 3.5)
		w, h = rawdraw.textsize(text2, 2)
		rawdraw.drawtext(text2, (global.cam.w-w)/2, 120, 0xffffebff, 2)
		w, h = rawdraw.textsize(text3, 2)
		rawdraw.drawtext(text3, (global.cam.w-w)/2, 140, 0xffffebff, 2)

		if input.isjustpressed(input.KEY_ENTER) {
			score = 0
			global.camy = 0
			p1.ent.p.x = -20
			p1.ent.p.y = 0
			p2.ent.p.x = 20
			p2.ent.p.y = 0
			dead = false
			obstacles = []Obstacle{}
			death_msg = "YOU DIED"
		}
	}
}

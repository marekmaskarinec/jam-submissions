
import (
	"th.um"
	"rect.um"
	"canvas.um"
	
	"global.um"
)

type Scene* = struct {
	reseter: fn()
	handler: fn()
	drawer: fn(cam: rect.Rect)
}

const (
	gameScn* = 1
	gameOverScn*
	dialogScn*
	menuScn*

	curtainsLen = 200
)

var (
	state: int // -1 is switching
	target: int
	source: int

	scenes: []Scene

	changeStart: int
)

fn init*() {
	scenes = []Scene{}
}

fn add*(r, h: fn(), d: fn(cam: rect.Rect)) {
	scenes = append(scenes, Scene{r, h, d})
}

fn change*(tgt: int) {
	if target == tgt {
		return
	}

	target = tgt
	if state != -1 {
		source = state
	}
	state = -1

	scenes[target].reseter()
	changeStart = th.time - 1
}

fn handle*() {
	if state == -1 {
		if th.time - changeStart < curtainsLen && source != -1 {
			scenes[source].handler()
		} else if th.time - changeStart < curtainsLen * 2 {
			scenes[target].handler()
		} else {
			state = target
		}
		return
	}
	scenes[state].handler()
}

fn draw*(cam: rect.Rect) {
	if state == -1 {
		if th.time - changeStart < curtainsLen && source != -1 {
			scenes[source].drawer(cam)
			canvas.drawRect(global.darkColor, rect.mk(
				0, 0,
				round(42 * (real(th.time-changeStart)/curtainsLen)), 48))
			canvas.drawRect(global.darkColor, rect.mk(
				84 - round(42 * (real(th.time-changeStart)/curtainsLen)), 0,
				42, 48))
		} else if th.time - changeStart < curtainsLen * 2 {
			scenes[target].drawer(cam)
			canvas.drawRect(global.darkColor, rect.mk(
				0, 0,
				round(42 * (2 - real(th.time-changeStart)/curtainsLen)), 48))
			canvas.drawRect(global.darkColor, rect.mk(
				round(42 * (real(th.time-changeStart)/curtainsLen)), 0,
				42, 48))
		}
		return
	}

	scenes[state].drawer(cam)
}

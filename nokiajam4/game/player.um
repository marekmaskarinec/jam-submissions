
import (
	"th.um"
	"ent.um"
	"rect.um"
	"audio.um"
	"image.um"
	"input.um"
	"signal.um"
	"canvas.um"

	"game.um"
	"sine.um"
	"block.um"
	"laser.um"
	"bullet.um"
	"../util.um"
	"../scene.um"
	"../noksnd.um"
	"../global.um"
	"../menu/menu.um"
)

const (
	moveSpeed* = 0.03

	invincTime* = 800
)

var (
	e: ent.Ent
	p: th.Vf2

	m: th.Vf2

	collTime: int = -2000

	hurtSnd: audio.Sound
	deathSnd: audio.Sound
)

fn reset*() {
	p = game.center.sub(th.Vf2{e.r.w/2, e.r.h/2})
}

fn init*() {
	e = ent.mk(image.Image{0},
		th.Transform{
			s: th.Vf2{1, 1}})
	e.r = rect.mk(0, 0, 3, 2)

	hurtSnd = audio.load("sfx/hurt.wav")
	printf("hurt.wav: %s\n", repr(hurtSnd.validate()))
	noksnd.addSound(hurtSnd)
	deathSnd = audio.load("sfx/die.wav")
	printf("die.wav: %s\n", repr(deathSnd.validate()))
	noksnd.addSound(deathSnd)
	deathSnd.vol(0.5)
}

fn die*() {
	noksnd.play(deathSnd)

	if game.isArcade {
		if game.score > game.maxScore {
			game.maxScore = game.score
		}
		menu.data = []str{
			"SCORE: " + repr(game.score),
			"TOP SCORE: " + repr(game.maxScore),
			"RETRY", "MENU", "QUIT"}
		menu.callbacks = []fn(){
			fn(){}, fn(){},
			fn() { scene.change(0) },
			fn() { menu.mainMenuPreset() },
			fn() { global.running = false }}
	} else {
		menu.data = []str{"RETRY", "MENU", "QUIT"}
		menu.callbacks = []fn(){
			fn() { scene.change(scene.gameScn) },
			fn() { menu.mainMenuPreset() },
			fn() { global.running = false }}
	}

	menu.title = "GAME OVER"
	scene.change(scene.menuScn)
}

fn handleHit*() {
	signal.emit("player_hit", null)
	game.playerHp--
	if game.playerHp == 0 {
		die()
	} else {
		noksnd.play(hurtSnd)
	}
}

fn handle*() {
	m = th.Vf2{}
	if input.isPressed(input.key_up) {
		p.y -= moveSpeed * th.delta
		m.y -= 1
	}
	if input.isPressed(input.key_down) {
		p.y += moveSpeed * th.delta
		m.y += 1
	}
	if input.isPressed(input.key_left) {
		p.x -= moveSpeed * th.delta
		m.x -= 1
	}
	if input.isPressed(input.key_right) {
		p.x += moveSpeed * th.delta
		m.x += 1
	}

	e.t.p = game.toWorld(p.rnd())

	if (len(e.getColl(bullet.scn, 1)) != 0 ||
	    len(e.getColl(sine.scn, 1))   != 0 ||
	    len(e.getColl(laser.scn, 1))  != 0) &&
     th.time - collTime > invincTime {
		collTime = th.time
		handleHit()
	}

	bc := e.getColl(block.scn, 1)
	if len(bc) != 0 && th.time - block.blocks[bc[0].index].start > block.blinkTime {
		die()
	}

	laser.playerPos = p
}

fn draw*(cam: rect.Rect) {
	sp := game.toScreen(p.rnd())

	if th.time - collTime < invincTime && (th.time / 100) % 2 == 0 {
		return
	}

	// eyes
	canvas.drawRect(global.darkColor, rect.mk(sp.x, sp.y, 1, 2))
	canvas.drawRect(global.darkColor, rect.mk(sp.x + 2, sp.y, 1, 2))

	var left, right: int
	if m.x != 0 || m.y != 0 {
		left = (th.time / 200) % 2
		right = (th.time / 200 + 1) % 2
	}

	// feet
	canvas.drawRect(global.darkColor,
		rect.mk(
			sp.x - 1,
			sp.y + 3 + left,
			2, 1))
	canvas.drawRect(global.darkColor,
		rect.mk(
			sp.x - 1 + 3,
			sp.y + 3 + right,
			2, 1))

	// hands
	canvas.drawRect(global.darkColor,
		rect.mk(
			sp.x - 2,
			sp.y + 1 - left,
			1, 1))
	canvas.drawRect(global.darkColor,
		rect.mk(
			sp.x + 2 + 2,
			sp.y + 1 - right,
			1, 1))
}


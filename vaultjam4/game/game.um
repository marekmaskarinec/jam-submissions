
import (
	"th.um"
	"ent.um"
	"std.um"
	"rect.um"
	"atlas.um"
	"image.um"
	"input.um"
	"signal.um"
	"tilemap.um"

	"../scene.um"
	"../global.um"
	"../static/levels.um"
)

const (
	floorTileCount = 6

	coinColor = 0xffff0000
	coinDuration = 3000

	turretPrice* = 20
	mortarPrice* = 40
	bombPrice* = 50
)

type Building* = interface {
	init(pos: th.Vf2): ^ent.Ent
	reset()
	handle()
	draw()
	drawProjectiles()

	refill(amount: int)
}

type Enemy* = interface {
	init(pos: th.Vf2)
	reset()
	handle()
	draw()

	getEnt(): ^ent.Ent
	damage(amount: int)
	alive(): bool
	die()
}

type Env* = struct {
	path: []th.Vf2
	map: tilemap.Tilemap
}

type Coin* = struct {
	e: ^ent.Ent
	spawnTime: int
}

var (
	bdgs*: []Building
	bdgsScn*: []^ent.Ent

	enms*: []Enemy
	enmsScn*: []^ent.Ent

	coins*: []Coin
	coinScn*: []^ent.Ent

	tileset: atlas.Atlas
	env*: Env

	health*: int
	money*: int
	targetKills*: int
	killCount*: int
	bossActive*: bool 
	bossMaxHp*: int
)

fn (e: ^Env) init*(pts: []th.Vf2, dm: th.Vf2) {
	cells := make([]th.uu, trunc(dm.x * dm.y))
	
	for i:=0; i < len(cells); i++ {
		cells[i] = std.rand()%floorTileCount + 1
	}

	pathCells := make([]th.uu, trunc(dm.x * dm.y))
	for i:=0; i < len(pts) - 1; i++ {
		mot := pts[i+1].sub(pts[i])
		mot.x /= pts[i].distanceTo(pts[i+1])
		mot.y /= pts[i].distanceTo(pts[i+1])
		for p:=pts[i]; p.distanceTo(pts[i]) < pts[i].distanceTo(pts[i+1]); p = p.add(mot) {
			pathCells[trunc(p.y * dm.x + p.x)] = 1
		}
	}
	pathCells[trunc(pts[len(pts)-1].y * dm.x + pts[len(pts)-1].x)] = 1

	idx := floorTileCount + 1
	cfg := make([]th.uu, 16)
	for i:=0; i < 16; i++ {
		cfg[i] = idx + 6
	}
	cfg[tilemap.left | tilemap.bot                                ] = idx + 0
	cfg[tilemap.top  | tilemap.right                              ] = idx + 1
	cfg[tilemap.left | tilemap.top                                ] = idx + 2
	cfg[tilemap.left | tilemap.right                              ] = idx + 3
	cfg[tilemap.top  | tilemap.bot                                ] = idx + 4
	cfg[tilemap.bot  | tilemap.right                              ] = idx + 5
	cfg[tilemap.top  | tilemap.bot  | tilemap.left | tilemap.right] = idx + 6
	cfg[tilemap.bot  | tilemap.left | tilemap.right               ] = idx + 7
	cfg[tilemap.left                                              ] = idx + 8
	cfg[tilemap.right                                             ] = idx + 9
	cfg[tilemap.top                                               ] = idx + 10
	cfg[tilemap.bot                                               ] = idx + 11

	e.map = tilemap.mk(cells, trunc(dm.x), tileset, 1)
	e.map.autotile(pathCells, cfg, 1)

	e.path = make([]th.Vf2, len(pts))
	for i:=0; i < len(e.path); i++ {
		e.path[i].x = pts[i].x * global.tileSize
		e.path[i].y = pts[i].y * global.tileSize
	}
}

fn (e: ^Env) isPath(p: th.Vf2): bool {
	p.x /= global.tileSize
	p.y /= global.tileSize

	if p.x < 0 || p.x < 0 || p.x >= e.map.w || p.y >= len(e.map.cells) / e.map.w {
		return false
	}

	return e.map.cells[trunc(p.x + p.y * e.map.w)] > floorTileCount
}

fn loadLevel*(n: int) {
	lvl := levels.getLevel(n)

	env.init(lvl.path,
		th.Vf2{20, 20})//th.Vf2{global.cam.w/global.tileSize, global.cam.h/global.tileSize})

	targetKills = lvl.killTarget
	bossMaxHp = lvl.bossHp
}

fn spawnCoin*(p: th.Vf2) {
	cn := Coin{}

	cn.e = new(ent.Ent)
	cn.e^ = ent.mk(image.Image{}, th.Transform{ s: th.Vf2{1, 1} })
	cn.e.r = rect.mk(0, 0, 1, 1)
	cn.e.c = coinColor
	cn.e.t.p = p

	cn.spawnTime = th.time

	coins = append(coins, cn)
	coinScn = append(coinScn, cn.e)
}

fn gameOver*() {
	scene.change(global.gameOverScnId)
}

fn init*() {
	bdgs = []Building{}
	bdgsScn = []^ent.Ent{}

	enms = []Enemy{}
	enmsScn = []^ent.Ent{}

	coins = []Coin{}
	coinScn = []^ent.Ent{}

	tileset = atlas.mk(image.load("gfx/ground-tiles.png"), th.Vf2{6, 3})

	signal.register("path_finish", signal.Callback{
		health--
		if health <= 0 {
			gameOver()
		}})
}

fn reset*() {
	bdgs = []Building{}
	bdgsScn = []^ent.Ent{}
	enms = []Enemy{}
	enmsScn = []^ent.Ent{}

	health = 9
	money = 100
	killCount = 0
	bossActive = false
	coins = []Coin{}
}

fn handle*() {
	for i:=0; i < len(bdgs); i++ {
		bdgs[i].handle()
	}

	for i:=0; i < len(enms); i++ {
		enms[i].handle()
		if !enms[i].alive() {
			enms[i].die()
			signal.emit("enemy_kill", i)
			enms = delete(enms, i)
			enmsScn = delete(enmsScn, i)
			killCount++
			if killCount >= targetKills {
				bossActive = true
			}
		}
	}

	for i:=0; i < len(coins); i++ {
		if th.time - coins[i].spawnTime >= coinDuration {
			coins = delete(coins, i)
			break
		}
	}
}

fn draw*() {
	env.map.draw(global.cam)

	for i:=0; i < len(coins); i++ {
		coins[i].e.c = coinColor + trunc(0xff*(1 - real(th.time-coins[i].spawnTime)/coinDuration))
		coins[i].e.draw(global.cam)
	}

	for i:=0; i < len(bdgs); i++ {
		bdgs[i].draw()
	}

	for i:=0; i < len(enms); i++ {
		enms[i].draw()
	}

	for i:=0; i < len(bdgs); i++ {
		bdgs[i].drawProjectiles()
	}
}

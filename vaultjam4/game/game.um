
import (
	"th.um"
	"ent.um"
	"std.um"
	"atlas.um"
	"image.um"
	"signal.um"
	"tilemap.um"

	"../global.um"
)

const (
	floorTileCount = 6
)

type Building* = interface {
	init(pos: th.Vf2): ^ent.Ent
	reset()
	handle()
	draw()

	refill(amount: int)
}

type Enemy* = interface {
	init(pos: th.Vf2)
	reset()
	handle()
	draw()

	getEnt(): ^ent.Ent
	damage(amount: int)
	alive(): bool
}

type Env* = struct {
	path: []th.Vf2
	map: tilemap.Tilemap
}

var (
	bdgs*: []Building
	bdgsScn*: []^ent.Ent

	enms*: []Enemy
	enmsScn*: []^ent.Ent

	tileset: atlas.Atlas
	env*: Env
)

fn (e: ^Env) init*(pts: []th.Vf2, dm: th.Vf2) {
	cells := make([]th.uu, trunc(dm.x * dm.y))
	
	for i:=0; i < len(cells); i++ {
		cells[i] = std.rand()%floorTileCount + 1
	}

	pathCells := make([]th.uu, trunc(dm.x * dm.y))
	for i:=0; i < len(pts) - 1; i++ {
		mot := pts[i+1].sub(pts[i])
		mot.x /= pts[i].distanceTo(pts[i+1])
		mot.y /= pts[i].distanceTo(pts[i+1])
		for p:=pts[i]; p.x != pts[i+1].x || p.y != pts[i+1].y; p = p.add(mot) {
			pathCells[trunc(p.y * dm.x + p.x)] = 1
		}
	}

	idx := floorTileCount + 1
	cfg := make([]th.uu, 16)
	for i:=0; i < 16; i++ {
		cfg[i] = idx
	}
	cfg[tilemap.left | tilemap.bot                                ] = idx + 0
	cfg[tilemap.top  | tilemap.right                              ] = idx + 1
	cfg[tilemap.left | tilemap.top                                ] = idx + 2
	cfg[tilemap.left | tilemap.right                              ] = idx + 3
	cfg[tilemap.top  | tilemap.bot                                ] = idx + 4
	cfg[tilemap.bot  | tilemap.right                              ] = idx + 5
	cfg[tilemap.top  | tilemap.bot  | tilemap.left | tilemap.right] = idx + 6
	cfg[tilemap.bot  | tilemap.left | tilemap.right               ] = idx + 7

	e.map = tilemap.mk(cells, trunc(dm.x), tileset, 1)
	e.map.autotile(pathCells, cfg, 1)

	e.path = pts
	for i:=0; i < len(e.path); i++ {
		e.path[i].x *= global.tileSize
		e.path[i].y *= global.tileSize
	}
}

fn init*() {
	bdgs = []Building{}
	bdgsScn = []^ent.Ent{}

	enms = []Enemy{}
	enmsScn = []^ent.Ent{}

	tileset = atlas.mk(image.load("gfx/ground-tiles.png"), th.Vf2{6, 3})
}

fn reset*() {
	for i:=0; i < len(bdgs); i++ {
		bdgs[i].reset()
	}

	for i:=0; i < len(enms); i++ {
		enms[i].reset()
	}
}

fn handle*() {
	for i:=0; i < len(bdgs); i++ {
		bdgs[i].handle()
	}

	for i:=0; i < len(enms); i++ {
		enms[i].handle()
		if !enms[i].alive() {
			signal.emit("enemy_kill", i)
			enms = delete(enms, i)
			enmsScn = delete(enmsScn, i)
		}
	}
}

fn draw*() {
	env.map.draw(global.cam)

	for i:=0; i < len(bdgs); i++ {
		bdgs[i].draw()
	}

	for i:=0; i < len(enms); i++ {
		enms[i].draw()
	}
}

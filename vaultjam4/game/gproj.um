
import (
	"th.um"
	"ent.um"
	"rect.um"
	"image.um"

	"game.um"
	"../global.um"
)

const (
	speed = 0.2
)

var (
	img: image.Image = image.Image{}
	trans: th.Transform = th.Transform{ s: th.Vf2{1, 1} }
)

fn init*() {
	img = image.load("gfx/turret-projectile.png")
}

type Gproj* = struct {
	target: ^game.Enemy
	e: ^ent.Ent
	startPos: th.Vf2
	motion: th.Vf2
}

fn mk*(pos: th.Vf2, target: ^game.Enemy): Gproj {
	gpr := Gproj{}
	gpr.target = target
	gpr.e = new(ent.Ent)
	gpr.e^ = ent.mk(img, trans)
	gpr.e.r = rect.mk(0, 0, 3, 3)
	gpr.e.t.p = pos
	
	gpr.startPos = pos

	tpos := target.getEnt().t.p.add(th.Vf2{target.getEnt().r.w/2, target.getEnt().r.h/2})

	return gpr
}

fn (gpr: ^Gproj) handle*(): bool {
	tent := gpr.target.getEnt()
	tpos := tent.t.p.add(th.Vf2{tent.r.w/2, tent.r.h/2})
	dist := tpos.distanceTo(gpr.e.t.p)
	if dist == 0 {
		return false
	}

	agl := gpr.e.t.p.angleTo(tpos)
	gpr.e.t.r = agl

	gpr.motion = tpos.sub(gpr.e.t.p).
		div(th.Vf2{dist, dist})

	const detail = 5
	for i:=0; i < detail; i++ {
		gpr.e.t.p = gpr.e.t.p.add(gpr.motion.mul(th.Vf2{th.delta, th.delta}).mul(th.Vf2{speed/detail, speed/detail}))
  
		if len(gpr.e.getColl([]^ent.Ent{tent}, 1)) > 0 {
			gpr.target.damage(1) // TODO: setable damage
			return true
		}
	}

	if gpr.e.t.p.distanceTo(gpr.startPos) > global.cam.w {
		return true
	}

	return false
}

fn (gpr: ^Gproj) draw*() {
	gpr.e.draw(global.cam)
}


import (
	"th.um"
	"ent.um"
	"rect.um"
	"atlas.um"
	"image.um"

	"../game.um"
	"../../res.um"
	"../../global.um"
	"../../logger.um"
	"../../animator.um"
)

const (
	maxAmmo = 20
	fireInterval = 800
	barrelLength = 5
	projSpeed = 0.2
)

var (
	trans: th.Transform = th.Transform{ s: th.Vf2{1, 1} }
	barrelAtl: atlas.Atlas
)

fn init*() {
	barrelAtl = atlas.mk(res.turretImg, th.Vf2{3, 1})
}

type Proj* = struct {
	target: ^game.Enemy
	e: ^ent.Ent
	startPos: th.Vf2
	motion: th.Vf2
	spawnTime: int
}

fn mkProj*(pos: th.Vf2, target: ^game.Enemy): Proj {
	gpr := Proj{}
	gpr.target = target
	gpr.e = new(ent.Ent)
	gpr.e^ = ent.mk(res.turretProjImg, trans)
	gpr.e.r = rect.mk(0, 0, 3, 3)
	gpr.e.t.p = pos
	
	gpr.startPos = pos
	gpr.spawnTime = th.time

	tpos := target.getEnt().t.p.add(th.Vf2{target.getEnt().r.w/2, target.getEnt().r.h/2})

	return gpr
}

fn (gpr: ^Proj) handle*(): bool {
	tent := gpr.target.getEnt()
	tpos := tent.t.p.add(th.Vf2{tent.r.w/2, tent.r.h/2})
	dist := tpos.distanceTo(gpr.e.t.p)
	if dist == 0 {
		return false
	}

	agl := gpr.e.t.p.angleTo(tpos)
	gpr.e.t.r = agl

	gpr.motion = tpos.sub(gpr.e.t.p).
		div(th.Vf2{dist, dist})

	const detail = 10
	scn := []^ent.Ent{tent}
	mot := th.Vf2{
		gpr.motion.x * th.delta * projSpeed/detail,
		gpr.motion.y * th.delta * projSpeed/detail}
	for i:=0; i < detail; i++ {
		gpr.e.t.p.x += mot.x
		gpr.e.t.p.y += mot.y
  
		if len(gpr.e.getColl(scn, 1)) > 0 || gpr.e.t.p.distanceTo(tent.t.p) < 0.5 * global.tileSize {
			gpr.target.damage(1) // TODO: setable damage
			return true
		}
	}

	if gpr.e.t.p.distanceTo(gpr.startPos) > global.cam.w {
		return true
	}

	if th.time - gpr.spawnTime >= 4000 {
		return true
	}

	return false
}

fn (gpr: ^Proj) draw*() {
	gpr.e.draw(global.cam)
}

type AimingTurret* = struct {
	e: ^ent.Ent
	tgt: ^game.Enemy
	projectiles: []Proj
	agl: th.fu

	lastFire: int
	fireInterval: int
	ammo: int
	anm: animator.Anim
}

fn (atr: ^AimingTurret) init*(pos: th.Vf2): ^ent.Ent {
	atr.e = new(ent.Ent)
	atr.e^ = ent.mk(res.turretBaseImg, trans)
	atr.e.c = th.white
	atr.e.t.p = pos

	atr.fireInterval = fireInterval
	atr.projectiles = []Proj{}

	atr.anm = animator.Anim{
		atl: barrelAtl,
		min: 0,
		max: 1,
		fps: 5}

	return atr.e
}

fn (atr: ^AimingTurret) reset*() {
	atr.ammo = maxAmmo
	atr.e.t.r = 0
}

fn (atr: ^AimingTurret) barrelHeadPos(): th.Vf2 {
	center := th.Vf2{atr.e.t.p.x + atr.e.r.w/2, atr.e.t.p.y + atr.e.r.h/2}
	head := center
	head.x -= barrelLength
	head.y -= 2
	return head.rotated(center, atr.agl)
}

fn (atr: ^AimingTurret) shoot*() {
	atr.projectiles = append(atr.projectiles, mkProj(atr.barrelHeadPos(), atr.tgt))
	atr.lastFire = th.time

	atr.anm.max = 3
	atr.anm.offset = th.time
}

fn (atr: ^AimingTurret) findEnemy(): ^game.Enemy {
	dist := -1.0
	index := -1
	for i:=0; i < len(game.enms); i++ {
		dist2 := atr.e.t.p.distanceTo(game.enmsScn[i].t.p)
		if dist < 0 || dist2 < dist {
			dist = dist2
			index = i
		}
	}

	if index < 0 {
		return null
	}
	return &game.enms[index]
}

fn (atr: ^AimingTurret) handle*() {
	if (th.time/50)%2 == 0 {
		atr.tgt = atr.findEnemy()
	}

	if atr.anm.framesPlayed() >= atr.anm.max {
		atr.anm.max = 1
	}

	for i:=0; i < len(atr.projectiles) && i >= 0; i++ {
		if atr.projectiles[i].handle() {
			atr.projectiles = delete(atr.projectiles, i)
			i--
		}
	}

	if atr.tgt != null {
		atr.agl = atr.e.t.p.angleTo(atr.tgt.getEnt().t.p)

		if th.time - atr.lastFire >= atr.fireInterval {
			atr.shoot()
		}

		if !atr.tgt.alive() {
			atr.tgt = null
		}

	} else {
		atr.tgt = atr.findEnemy()
		if atr.tgt == null { return }
	}
}

fn (atr: ^AimingTurret) draw*() {
	atr.e.draw(global.cam)

	atr.anm.animate(th.time)
	res.turretImg.draw(th.Transform{
		p: global.cam.toScreen(atr.e.t.p),
		s: th.Vf2{ 1, 1 },
		o: th.Vf2{ atr.e.r.w/2, atr.e.r.h/2 },
		r: atr.agl - 180})
}

fn (atr: ^AimingTurret) drawProjectiles*() {
	for i:=0; i < len(atr.projectiles); i++ {
		atr.projectiles[i].draw()
	}
}

fn (atr: ^AimingTurret) refill*(amount: int) {

}

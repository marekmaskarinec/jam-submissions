
import (
	"th.um"
	"std.um"
	"rect.um"
	"image.um"
	"canvas.um"
	
	"game.um"
	"../res.um"
	"../global.um"
	"../menu/menuutil.um"
)

var (
	healthImg: image.Image
	coinImg*: image.Image

	bossHealths: []int
)

fn init*() {
	healthImg = image.load("gfx/hearth.png")
	coinImg = image.load("gfx/coin.png")
	bossHealths = []int{}
}

fn drawBossHealth*(hp: int) {
	bossHealths = append(bossHealths, hp)
}

fn reset*() { }

fn handle*() { }

fn draw*() {
	res.gameBorderImg.draw(th.Transform{s: th.Vf2{1, 1}})

	s := th.Vf2{3.5, 3.5}.div(healthImg.getDims())
	for i:=0; i < game.health; i++ {
		p := th.Vf2{i % 3, i / 3}
		healthImg.draw(th.Transform{
			s: s,
			p: th.Vf2{p.x * 4 + global.tileSize + 1.5, p.y * 4 + 1}})
	}

	coinImg.draw(th.Transform{
		s: th.Vf2{1, 1},
		p: th.Vf2{global.tileSize * 2 + 2, -1}})
	const coinLabelSize = 0.2*5
	w := menuutil.textLen(std.itoa(game.money), coinLabelSize)
	res.ren.draw(std.itoa(game.money),
		th.Vf2{global.tileSize * 2 + 2 + (coinImg.getDims().x-w)/2, 4.5},
		0x9f7d06ff, 0.2*5)

	if !game.bossActive {
		res.ren.draw(std.itoa(
			game.killCount) + "/" + std.itoa(game.targetKills),
			th.Vf2{2 + 15 + 30 + 15 + 30, 2}, th.black, 0.2*15)
	}

	for i:=0; i < len(bossHealths); i++ {
		off := global.tileSize * 3 + 4
		w := global.cam.w - 2 - off

		canvas.drawRect(0xb43636dd, rect.mk(off, 3, w * bossHealths[i]/game.bossMaxHp, 11))
	}

	bossHealths = []int{}
}

